#!/usr/bin/env python

import sys
import os
import re
import uuid
import socket
import subprocess
import boto.ec2
import boto.utils
import argparse
import random
import time

from da_aws import connect_ec2, get_my_volumes


def parse_args():
    parser = argparse.ArgumentParser(description='snapshot EBS volumes')

    parser.add_argument('mount_points', nargs='+', help='mount point of volume to snapshot')
    #parser.add_argument('-n', '--dry-run', action='store_true', help='help text')
    parser.add_argument('--access-key-id')
    parser.add_argument('--secret-access-key')
    parser.add_argument('-t', '--tag', dest='tags', action='append', default=[], metavar='NAME=VALUE')
    parser.add_argument('-m', '--no-mysql', action='store_true', help="don't perform mysql steps")
    parser.add_argument('-s', '--splay', default=0, type=int, help="sleep a random number of seconds up to this before running snapshot")

    args = parser.parse_args()
    return args


def generate_uuid(config):
    config.tags.append("uuid=%s" % uuid.uuid4())


def get_block_device(mount_point):
    print "searching for block device mounted at", mount_point

    mounts = {}
    with open('/proc/mounts', 'r') as proc_mounts:
        lines = proc_mounts.read().splitlines()
    for line in lines:
        columns = line.split(' ')
        mounts[columns[1]] = columns[0]
    return mounts[mount_point]


def normalize_bdev(bdev):
    if bdev.startswith('/dev/nvme'):
        # for nvme devices, nvme1 is equivalent to xvdf
        # 101 = ord('e')
        return '/dev/xvd' + chr(int(bdev[9]) + 101)
    return re.sub('^/dev/s', '/dev/xv', bdev)


def get_volume_id(conn, block_device):
    print "searching for EBS volume ID of", block_device

    volumes = get_my_volumes(conn)
    for volume in volumes:
        if normalize_bdev(volume.attach_data.device) == normalize_bdev(block_device):
            print "volume ID is", volume.id
            return volume.id

    raise Exception("EBS volume for %s not found!" % block_device)


def connect_mysql(config):
    print "connecting to MySQL"

    import MySQLdb

    conn = MySQLdb.connect(read_default_file='/root/.my.cnf')
    return conn.cursor()


def lock_mysql(mysql):
    print "running FLUSH TABLES WITH READ LOCK"
    mysql.execute('FLUSH TABLES WITH READ LOCK')


def save_master_info(mysql):
    print "saving binlog position to backup_host.info"

    rows = mysql.execute('SHOW MASTER STATUS')

    if rows == 0:
        print "  (skipping because binary logging is not enabled)"
    else:
        log_file, log_pos = mysql.fetchone()[:2]

        with open('/var/lib/mysql/backup_host.info', 'w') as coordinates_file:
            print >> coordinates_file, log_file, log_pos, socket.getfqdn()


def freeze_fs(mount_point):
    print "freezing filesystem mounted at", mount_point
    output = subprocess.check_output(['/sbin/fsfreeze', '-f', mount_point])
    if output:
        print 'fsfreeze -f output: %s' % output


def get_snapshot_description(mount_point):
    return "%s:%s" % (socket.getfqdn(), mount_point)


def create_snapshot(conn, volume_id):
    print "taking snapshot of %s" % volume_id
    snapshot = conn.create_snapshot(volume_id)
    print snapshot.id
    return snapshot


def tag_snapshot(conn, snapshot, mount_point, additional_tags=[]):
    tags = {'Name': get_snapshot_description(mount_point)}
    for tag in additional_tags:
        name, value = tag.split('=', 1)
        tags[name] = value
    conn.create_tags([snapshot.id], tags)


def unfreeze_fs(mount_point):
    print "unfreezing filesystem mounted at", mount_point
    output = subprocess.check_output(['/sbin/fsfreeze', '-u', mount_point])
    if output:
        print 'fsfreeze -u output: %s' % output


def unlock_mysql(mysql):
    print "running UNLOCK TABLES"
    mysql.execute('UNLOCK TABLES')


def declare_victory():
    print "VICTORY IS MINE"


def main():
    config = parse_args()

    if config.splay > 0:
        sleep_secs = random.randint(0, config.splay)
        print "sleeping for %d seconds..." % sleep_secs
        time.sleep(sleep_secs)

    generate_uuid(config)
    conn = connect_ec2(config.access_key_id, config.secret_access_key)

    mysql = None

    try:
        block_devices = [get_block_device(mp) for mp in config.mount_points]
        volume_ids = [get_volume_id(conn, bdev) for bdev in block_devices]

        if not config.no_mysql:
            mysql = connect_mysql(config)
            lock_mysql(mysql)
            save_master_info(mysql)

        for mount_point in config.mount_points:
            freeze_fs(mount_point)

        for volume_id, mount_point in zip(volume_ids, config.mount_points):
            snapshot = create_snapshot(conn, volume_id)
            tag_snapshot(conn, snapshot, mount_point, config.tags)
    except Exception, e:
        print "ERROR encountered: %s: %s" % (type(e), e)
        print "will attempt to unfreeze filesystem",
        if config.no_mysql:
            print "..."
        else:
            print "and unlock MySQL..."
    else:
        declare_victory()
    finally:
        for mount_point in reversed(config.mount_points):
            unfreeze_fs(mount_point)

        if mysql:
            unlock_mysql(mysql)


if __name__ == '__main__':
    sys.exit(main())
